import java.util.ArrayList;


/**
 * <h1>CargoPlane</h1> Represents a Cargo Plane
 *
 * @author Jackson Oriez and Alexmaxfield
 * @version 12/4/2018
 */
public class CargoPlane extends Vehicle {
    final double gasRate = 2.33;

    /**
     * Default Constructor
     */
    //============================================================================
    public CargoPlane() {

    }

    //============================================================================

    /**
     * Constructor
     *
     * @param licensePlate license plate of vehicle
     * @param maxWeight    maximum weight that the vehicle can hold
     */
    //============================================================================
    public CargoPlane(String licensePlate, double maxWeight) {
        super(licensePlate, maxWeight);
    }

    //============================================================================

    /**
     * Overides its superclass method. Instead, after each iteration, the range will
     * increase by 10.
     *
     * @param warehousePackages List of packages to add from
     */
    @Override
    public void fill(ArrayList<Package> warehousePackages) {
        boolean full = false;
        int iteration = 0;
        int counter = 0;
        while (!full) {
            for (int i = 0; i < warehousePackages.size(); i++) {
                if (Math.abs(getZipDest() - warehousePackages.get(i).getDestination().zipCode) <= iteration &&
                        Math.abs(getZipDest() - warehousePackages.get(i).getDestination().zipCode) > (iteration - 10)) {
                    if (addPackage(warehousePackages.get(i))) {
                        addPackage(warehousePackages.get(i));
                        counter++;
                    } else {
                        full = true;
                        setMaxRange(iteration);
                    }
                }
            }
            if (counter == warehousePackages.size()) {
                full = true;
                setMaxRange(iteration);
            }
            iteration += 10;
        }
    }

    /*
     * =============================================================================
     * | Methods from Profitable Interface
     * =============================================================================
     */

    /**
     * Returns the profits generated by the packages currently in the Cargo Plane.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 2.33)
     * </p>
     */
    @Override
    public double getProfit() {
        double profit = 0;
        double deliveryCost = 0;
        for (int i = 0; i < getPackages().size(); i++) {
            profit += getPackages().get(i).getPrice();
        }
        deliveryCost = getMaxRange() * gasRate;
        profit = profit - deliveryCost;
        return profit;
    }

    /**
     * Generates a String of the Cargo Plane report. Cargo plane report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in cargo plane</li>
     * </ul>
     *
     * @return Cargo Plane Report
     */
    @Override
    public String report() {
        String shippingLabels = "";
        for (int i = 0; i < getPackages().size(); i++) {
            shippingLabels += getPackages().get(i).shippingLabel() + "\n";
        }
        return "==========Cargo Plane Report==========\nLicense Plate No.: " + getLicensePlate() + "\nDestination: " +
                getZipDest() + "\nWeight Load: " + getCurrentWeight() + "/" + getMaxWeight() + "\nNet Profit: $" +
                getProfit() + "\n=====Shipping Labels=====\n" + shippingLabels + "==============================";
    }


}